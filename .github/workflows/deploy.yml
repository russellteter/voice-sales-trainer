name: Production Deployment

on:
  push:
    branches: [main, production]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Run tests and security checks
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: voice_sales_trainer_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio httpx

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/voice_sales_trainer_test
          REDIS_URL: redis://localhost:6379/0
          JWT_SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: test
        run: |
          pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install frontend dependencies
        run: npm ci

      - name: Run frontend linting
        run: npm run lint

      - name: Run frontend tests
        run: npm test -- --coverage --watchAll=false

      - name: Build frontend
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8000
          NEXT_PUBLIC_ENVIRONMENT: test
        run: npm run build

  # Security scanning
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Python Security Check
        working-directory: ./backend
        run: |
          pip install safety bandit
          safety check -r requirements.txt
          bandit -r . -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            trivy-results.sarif
            backend/bandit-report.json

  # Build and push Docker images
  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.event_name != 'pull_request'
    outputs:
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Backend Image
      - name: Extract backend metadata
        id: meta-backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # Frontend Image
      - name: Extract frontend metadata
        id: meta-frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./frontend.Dockerfile
          target: production
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          build-args: |
            NEXT_PUBLIC_API_URL=${{ secrets.PRODUCTION_API_URL }}
            NEXT_PUBLIC_ENVIRONMENT=production

  # Deploy to staging
  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.STAGING_HOST }}
          username: ${{ secrets.STAGING_USERNAME }}
          key: ${{ secrets.STAGING_SSH_KEY }}
          port: ${{ secrets.STAGING_PORT || 22 }}
          script: |
            cd /opt/voice-sales-trainer
            
            # Create backup
            docker-compose -f docker-compose.prod.yml exec -T postgres pg_dump -U voice_trainer voice_sales_trainer > backup-$(date +%Y%m%d-%H%M%S).sql
            
            # Pull latest images
            docker pull ${{ needs.build.outputs.backend-image }}
            docker pull ${{ needs.build.outputs.frontend-image }}
            
            # Update environment
            cp production.env.example .env
            
            # Deploy with zero downtime
            docker-compose -f docker-compose.prod.yml up -d --no-deps backend frontend
            
            # Wait for health checks
            timeout 300 bash -c 'until docker-compose -f docker-compose.prod.yml ps | grep -q "healthy"; do sleep 10; done'
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
            
            echo "Staging deployment completed successfully"

      - name: Run staging health checks
        run: |
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          curl -f ${{ secrets.STAGING_URL }}/api/v1/health || exit 1

  # Deploy to production
  deploy-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: actions/github-script@v6
        id: create-deployment
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Deploying to production',
              auto_merge: false
            });
            return deployment.data.id;

      - name: Deploy to production server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /opt/voice-sales-trainer
            
            # Create backup
            ./backup.sh
            
            # Pull latest images
            docker pull ${{ needs.build.outputs.backend-image }}
            docker pull ${{ needs.build.outputs.frontend-image }}
            
            # Update production configuration
            source .env
            
            # Blue-green deployment strategy
            docker-compose -f docker-compose.prod.yml up -d --scale backend=2 --scale frontend=2 --no-recreate
            
            # Wait for new containers to be healthy
            timeout 300 bash -c 'until [ $(docker-compose -f docker-compose.prod.yml ps -q backend | wc -l) -eq 2 ]; do sleep 10; done'
            timeout 300 bash -c 'until [ $(docker-compose -f docker-compose.prod.yml ps backend | grep -c "healthy") -eq 2 ]; do sleep 10; done'
            
            # Run database migrations
            docker-compose -f docker-compose.prod.yml exec -T backend alembic upgrade head
            
            # Scale down old containers
            docker-compose -f docker-compose.prod.yml up -d --scale backend=1 --scale frontend=1
            
            # Clean up unused images
            docker image prune -f
            
            echo "Production deployment completed successfully"

      - name: Run production health checks
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/health || exit 1
          curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/scenarios || exit 1

      - name: Update deployment status (success)
        if: success()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'success',
              description: 'Production deployment successful',
              environment_url: '${{ secrets.PRODUCTION_URL }}'
            });

      - name: Update deployment status (failure)
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: ${{ steps.create-deployment.outputs.result }},
              state: 'failure',
              description: 'Production deployment failed'
            });

      - name: Notify team
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Production deployment ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            URL: ${{ secrets.PRODUCTION_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Rollback capability
  rollback:
    runs-on: ubuntu-latest
    if: failure() && github.event_name != 'pull_request'
    needs: [deploy-production]
    environment: production
    steps:
      - name: Rollback production deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USERNAME }}
          key: ${{ secrets.PRODUCTION_SSH_KEY }}
          port: ${{ secrets.PRODUCTION_PORT || 22 }}
          script: |
            cd /opt/voice-sales-trainer
            
            # Restore from backup
            ./restore.sh latest
            
            # Restart services
            docker-compose -f docker-compose.prod.yml restart
            
            echo "Rollback completed"

      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: 'warning'
          text: |
            🚨 Production rollback executed
            Commit: ${{ github.sha }}
            Reason: Deployment failure
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}