version: '3.8'

services:
  # Production PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: voice-sales-trainer-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-voice_sales_trainer}
      POSTGRES_USER: ${POSTGRES_USER:-voice_trainer}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-voice_trainer} -d ${POSTGRES_DB:-voice_sales_trainer}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Production Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: voice-sales-trainer-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis_data_prod:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Production FastAPI backend
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    image: voice-sales-trainer-backend:prod
    container_name: voice-sales-trainer-backend-prod
    restart: unless-stopped
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-voice_trainer}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-voice_sales_trainer}
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ENVIRONMENT=production
      - DEBUG=false
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY}
      - CLAUDE_API_KEY=${CLAUDE_API_KEY}
      - FRONTEND_URL=${FRONTEND_URL}
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - SENTRY_DSN=${SENTRY_DSN:-}
      - MAX_CONCURRENT_SESSIONS=${MAX_CONCURRENT_SESSIONS:-200}
    ports:
      - "127.0.0.1:8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./backups:/app/backups:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    command: >
      sh -c "
        alembic upgrade head &&
        gunicorn main:app 
        --worker-class uvicorn.workers.UvicornWorker 
        --workers ${WORKER_PROCESSES:-4}
        --worker-connections ${WORKER_CONNECTIONS:-1000}
        --worker-tmp-dir /dev/shm
        --bind 0.0.0.0:8000
        --timeout ${WORKER_TIMEOUT:-30}
        --keep-alive ${KEEP_ALIVE:-5}
        --max-requests 1000
        --max-requests-jitter 100
        --access-logfile -
        --error-logfile -
        --log-level info
      "
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Production Next.js frontend
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
      target: production
      args:
        - NEXT_PUBLIC_API_URL=${BACKEND_URL}
        - NEXT_PUBLIC_ENVIRONMENT=production
    image: voice-sales-trainer-frontend:prod
    container_name: voice-sales-trainer-frontend-prod
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${BACKEND_URL}
      - NEXT_PUBLIC_ENVIRONMENT=production
      - NEXT_PUBLIC_SENTRY_DSN=${SENTRY_DSN:-}
    ports:
      - "127.0.0.1:3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Nginx reverse proxy and load balancer
  nginx:
    image: nginx:1.25-alpine
    container_name: voice-sales-trainer-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - nginx_cache:/var/cache/nginx
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Monitoring and metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: voice-sales-trainer-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    ports:
      - "127.0.0.1:9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Log aggregation
  loki:
    image: grafana/loki:2.9.0
    container_name: voice-sales-trainer-loki
    restart: unless-stopped
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "127.0.0.1:3100:3100"
    volumes:
      - ./monitoring/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Grafana dashboard
  grafana:
    image: grafana/grafana:10.1.0
    container_name: voice-sales-trainer-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_DOMAIN=${GRAFANA_DOMAIN}
      - GF_SERVER_ROOT_URL=https://${GRAFANA_DOMAIN}
      - GF_SECURITY_COOKIE_SECURE=true
    ports:
      - "127.0.0.1:3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      - prometheus
      - loki
    networks:
      - voice-trainer-network
    security_opt:
      - no-new-privileges:true
    user: "1000:1000"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

volumes:
  postgres_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/voice-trainer-postgres-prod/_data
  redis_data_prod:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/lib/docker/volumes/voice-trainer-redis-prod/_data
  prometheus_data:
    driver: local
  loki_data:
    driver: local
  grafana_data:
    driver: local
  nginx_cache:
    driver: local

networks:
  voice-trainer-network:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: voice-trainer-br0
    ipam:
      config:
        - subnet: 172.20.0.0/16